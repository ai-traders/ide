#!/bin/bash

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${DIR}/ide_functions"
source "${DIR}/ide_version"

# This function is kept in this file because of usage of: $0
function helpfunc() {
    echo "Usage: $0 [-c COMMAND] [options]"
    echo "  --command | -c        Set IDE command, supported: run, pull, help, version."
    echo "                        Should be passed as first option. Default: run."
    echo "      -c run            Run docker or docker-compose run command."
    echo "      -c pull           Pull docker images specified in Idefile, do not run docker run, do not verify Idefile."
    echo "      -c help           Help. Display this message and quit."
    echo "      -c version        Version. Print version number and quit."
    echo -e ""
    echo "  Options for run command:"
    echo "  --idefile /path/to/Idefile         Specify IDEFILE, default is: ./Idefile"
    echo "  --dryrun                           Do not pull docker image, do not run docker run, verify Idefile. Unset by default."
    echo "  --force_not_interactive | --not_i  Do not run docker containers interactively."
    echo "  --not_rm                           Do not docker container afterwards. Unset by default."
    echo "  CMD                                Command to be run in docker container. Unset by default."
    echo -e ""
    echo "  Options for pull command:"
    echo "  --idefile /path/to/Idefile         Specify IDEFILE, default is: ./Idefile"
    echo "  --dryrun                           Do not pull docker image, do not run docker run, verify Idefile. Unset by default."
    exit
}

# default values
ide_command="run"

while (( $# > 0 ))
do
  case $1 in
  -h | --help)
    # In order to not let anyone run: "ide --help" and be surprised that
    # it could run a docker container.
    helpfunc
    exit 0
    ;;
  -c | --command)
    shift 1 # the value of ide command is under the next parameter, so now
    # $2 becomes: $1
    ide_command="$1"
    shift 1 # $2 is already assigned above, shift to turn $3 into $1
    ;;
  *)
    # assign the rest of parameters into other_options_array1
    # and stop the loop
    other_options_array=("$@") # shellcheck disable=SC2034
    break
    ;;
  esac
done

log_debug "Starting ide, version: $version"
log_debug "ide_command: $ide_command"

case $ide_command in
help)
  helpfunc
  exit 0
  ;;
version)
  echo "$0 version $version"
  exit 0
  ;;
run)
  # passing array as bash function parameter, thanks to:
  # http://stackoverflow.com/a/4017175
  runfunc other_options_array[@]
  exit 0
  ;;
pull)
  pullfunc other_options_array[@]
  exit 0
  ;;
*)
  log_error "Unsupported IDE command: ${ide_command}"
  exit 1
esac

exit 0
