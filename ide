#!/bin/bash

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/ide_functions

helpfunc() {
    echo "Usage: $0 [--group GROUP] [--idefile IDEFILE] COMMAND"
    echo "  --help     Help. Display this message and quit."
    echo "  --version  Version. Print version number and quit."
    echo "  --group    Specify GROUP from Idefile"
    echo "  --idefile  Specify IDEFILE, default is: ./Idefile"
    echo "  --dryrun   Do not pull docker image, do not run docker run."
    exit
}

# Echoes the docker run command, all the arguments are verified already.
# $1 is command to be run in docker container
# $2 is the file with environment variables to be mounted into docker container
construct_docker_command() {
  env_file="$1"
  if [ -z "$env_file" ]; then
    log_error "env_file not specified"
    return 1;
  fi

  # initial part of the docker command
  docker_cmd="docker run --rm -v $IDE_WORK:/ide/work -v $IDE_IDENTITY:/ide/identity:ro"
  if [ -t 0 ] ; then
    # interactive shell
    if [ -z "$command" ]; then
      docker_cmd="docker run -ti --rm -v $IDE_WORK:/ide/work -v $IDE_IDENTITY:/ide/identity:ro"
    fi
  fi

  docker_cmd+=" --env-file=\"$env_file\""

  if [ -n "$IDE_DOCKER_OPTIONS" ]; then
    docker_cmd+=" $IDE_DOCKER_OPTIONS"
  fi

  docker_cmd+=" $IDE_DOCKER_IMAGE \"$command\""
  echo "$docker_cmd"
}

# default values
groupname="default"
idefile="${PWD}/Idefile"
version="0.1.0"
dryrun="false"

while (( $# > 0 ))
do
    opt="$1"
    shift

    case $opt in
    --help)
        helpfunc
        exit 0
        ;;
    --version)
        echo "$0 version $version"
        exit 0
        ;;
    --group)  # Example with an operand
        echo "groupnames other than default are not supported"
        exit 1;
        # TODO: support groups
        # groupname="$1"
        # shift
        ;;
    --idefile)  # Example with an operand
        idefile="$1"
        shift
        ;;
    --dryrun)
        dryrun="true"
        ;;
    --*)
        echo "Invalid option: '$opt'" >&2
        exit 1
        ;;
    -*)
        echo "Invalid option: '$opt'" >&2
        exit 1
        ;;
    *)
        command="$opt $@"
        # the rest of arguments is the command
        break;
        ;;
   esac

done

# verify options
if [ -z "$groupname" ]; then
  echo "groupname not specified"
  exit 1;
fi
if [ -z "$idefile" ]; then
  echo "idefile not specified"
  exit 1;
fi
if [ ! -f "$idefile" ]; then
  # do not get full path here with:
  # idefile_full_path=$(readlink -f "$idefile")
  # it will be null
  echo "idefile: $idefile does not exist (relative to ${PWD})"
  exit 1;
fi
log_debug "Starting ide, version: $version"
log_debug "groupname: $groupname"
log_debug "idefile: $idefile"

# verify Idefile
source "$idefile"
if [ -z "$IDE_DOCKER_IMAGE" ]; then
  echo "IDE_DOCKER_IMAGE not set"
  exit 1;
fi
if [ -z "$IDE_DRIVER" ]; then
  IDE_DRIVER="docker"
  log_debug "IDE_DRIVER not set, setting to: $IDE_DRIVER"
fi
if [ "$IDE_DRIVER" != "docker" ]; then
  echo "IDE_DRIVER set to $IDE_DRIVER, supported is only: docker"
  exit 1
fi
if [ -z "$IDE_WORK" ]; then
  IDE_WORK=$PWD
  log_debug "IDE_WORK not set, setting to: $IDE_WORK"
fi
if [ ! -d "$IDE_WORK" ]; then
  echo "IDE_WORK set to $IDE_WORK which does not exist"
  exit 1
fi
if [ -z "$IDE_IDENTITY" ]; then
  IDE_IDENTITY=$HOME
  log_debug "IDE_IDENTITY not set, setting to: $IDE_IDENTITY"
fi
if [ ! -d "$IDE_IDENTITY" ]; then
  echo "IDE_IDENTITY set to $IDE_IDENTITY which does not exist"
  exit 1
fi
if [ -z "$IDE_VARS_BLACKLIST" ]; then
  IDE_VARS_BLACKLIST=BASH*,HOME,USERNAME,USER,LOGNAME,PATH,TERM,SHELL,MAIL,SUDO_*,WINDOWID,SSH_*,SESSION_*,GEM_HOME,GEM_PATH,GEM_ROOT,HOSTNAME,HOSTTYPE,IFS,PPID,PWD,OLDPWD
  log_debug "IDE_VARS_BLACKLIST not set, setting to: $IDE_VARS_BLACKLIST"
fi

env_file=$(get_env_vars_file_name)
env_dir=$(dirname "${env_file}")
mkdir -p ${env_dir}
save_environment_variables "$env_file" "$IDE_VARS_BLACKLIST"

# construct docker command
docker_command=$(construct_docker_command "$env_file" "$command")
log_debug "docker command would be:\n$docker_command"

# run docker run
if [[ "$dryrun" != "true" ]]; then
  eval "$docker_command"
  exit_status="$?"
  if [[ "$exit_status" != "0" ]]; then
    exit $exit_status
  fi
fi
